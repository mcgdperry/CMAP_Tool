const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  deleteScreensFolder: (screensPath) => ipcRenderer.invoke('folder:deleteScreensFolder', screensPath),
  selectScreensFolder: () => ipcRenderer.invoke('dialog:openFolder'),
  getAppDir: () => ipcRenderer.invoke('app:getAppDir'),
  makeDir: (dir) => ipcRenderer.invoke('file:makeDir', dir),
  copyFile: (src, dest) => ipcRenderer.invoke('file:copyFile', src, dest),
  deleteFile: (file) => ipcRenderer.invoke('file:deleteFile', file),
  resizeImage: (src, dest, w, h) => ipcRenderer.invoke('file:resizeImage', src, dest, w, h),
  zipFolder: (folder, zip) => ipcRenderer.invoke('file:zipFolder', folder, zip),
  importScreens: (selectedFolder, appDir) => ipcRenderer.invoke('screens:import', selectedFolder, appDir),
  readJsonFile: (filePath) => ipcRenderer.invoke('file:readJsonFile', filePath),
  selectFile: (fileType) => ipcRenderer.invoke('dialog:selectFile', fileType),
  readScreensFolder: () => ipcRenderer.invoke('read-screens-folder'),
  copyFilesToScreens: (fileList, screensFolder) => ipcRenderer.invoke('file:copyFilesToScreens', fileList, screensFolder),
  generateManifest: (fileContent) => ipcRenderer.send('file:saveManifest', fileContent),
  openManifest: () => ipcRenderer.invoke('file:openManifest'),
  readAttachment: (filename) => ipcRenderer.invoke('file:readAttachment', filename),
  saveAttachment: (filename, lineToWrite, append) => ipcRenderer.invoke('file:saveAttachment', filename, lineToWrite, append),
  removeLinesContaining: (filePath, search) => ipcRenderer.invoke('file:removeLinesContaining', filePath, search),
  readRectCSS: (filename) => ipcRenderer.invoke('file:readRectCSS', filename),
  saveRectCSS: (filename, contents) => ipcRenderer.invoke('file:saveRectCSS', filename, contents),
  checkIsDirectory: (fullPath) => ipcRenderer.invoke('check-is-directory', fullPath),
  getTileAssets: (tileId) => ipcRenderer.invoke('file:getTileAssets', tileId),
  copyPlaceholderImage: (destPath) => ipcRenderer.invoke('file:copyPlaceholderImage', destPath),
  renameFile: (oldPath, newPath) => ipcRenderer.invoke('file:renameFile', { oldPath, newPath }),
  fileExists: (relativePath) => ipcRenderer.invoke('file:exists', relativePath),
  deleteImage: (filePath) => ipcRenderer.invoke('file:deleteImage', filePath),
  promptImageUpload: () => ipcRenderer.invoke('dialog:promptImageUpload')
});